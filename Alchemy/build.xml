<?xml version="1.0" encoding="UTF-8"?>
<!-- You may freely edit this file. See commented blocks below for -->
<!-- some examples of how to customize the build. -->
<!-- (If you delete it and reopen the project it will be recreated.) -->
<project name="Alchemy" default="default" basedir=".">
    <description>Builds, tests, and runs the project Alchemy.</description>
    <import file="nbproject/build-impl.xml"/>
    <!--

    There exist several targets which are by default empty and which can be 
    used for execution of your tasks. These targets are usually executed 
    before and after some main targets. They are: 

      -pre-init:                 called before initialization of project properties
      -post-init:                called after initialization of project properties
      -pre-compile:              called before javac compilation
      -post-compile:             called after javac compilation
      -pre-compile-single:       called before javac compilation of single file
      -post-compile-single:      called after javac compilation of single file
      -pre-compile-test:         called before javac compilation of JUnit tests
      -post-compile-test:        called after javac compilation of JUnit tests
      -pre-compile-test-single:  called before javac compilation of single JUnit test
      -post-compile-test-single: called after javac compilation of single JUunit test
      -pre-jar:                  called before JAR building
      -post-jar:                 called after JAR building
      -post-clean:               called after cleaning build products

    (Targets beginning with '-' are not intended to be called on their own.)

    Example of inserting an obfuscator after compilation could look like this:

        <target name="-post-compile">
            <obfuscate>
                <fileset dir="${build.classes.dir}"/>
            </obfuscate>
        </target>

    For list of available properties check the imported 
    nbproject/build-impl.xml file. 


    Another way to customize the build is by overriding existing main targets.
    The targets of interest are: 

      -init-macrodef-javac:     defines macro for javac compilation
      -init-macrodef-junit:     defines macro for junit execution
      -init-macrodef-debug:     defines macro for class debugging
      -init-macrodef-java:      defines macro for class execution
      -do-jar-with-manifest:    JAR building (if you are using a manifest)
      -do-jar-without-manifest: JAR building (if you are not using a manifest)
      run:                      execution of project 
      -javadoc-build:           Javadoc generation
      test-report:              JUnit report generation

    An example of overriding the target for project execution could look like this:

        <target name="run" depends="Alchemy-impl.jar">
            <exec dir="bin" executable="launcher.exe">
                <arg file="${dist.jar}"/>
            </exec>
        </target>

    Notice that the overridden target depends on the jar target and not only on 
    the compile target as the regular run target does. Again, for a list of available 
    properties which you can use, check the target you are overriding in the
    nbproject/build-impl.xml file. 

    -->    
    
    <!-- Copy the required libraries into the build file -->
    <target name="-pre-jar"> 
        <unjar src="${file.reference.commons-logging.jar}" dest="${build.classes.dir}"/> 
        <unjar src="${file.reference.itext-2.0.6.jar}" dest="${build.classes.dir}"/> 
        <unjar src="${file.reference.jpf.jar}" dest="${build.classes.dir}"/> 
    </target> 
    
    
    <target name="-post-jar">
        
        <!-- Copy the compiled Plugin classes  - Need to find a better way to do this! -->
        <!--
        <copy file="${build.classes.dir}/alchemy/AlcCore.class" todir="${basedir}/plugins/core/alchemy"/>
        -->
        
        <!-- CREATES -->
        <!-- Shapes -->
        <copy file="${build.classes.dir}/alchemy/create/Shapes.class" todir="${basedir}/plugins/shapes/alchemy/create"/>
        <copy file="${build.classes.dir}/alchemy/create/Shapes$1.class" todir="${basedir}/plugins/shapes/alchemy/create"/>
        
        <!-- Type Shapes -->
        <copy todir="${basedir}/plugins/typeShapes/alchemy/create">
            <fileset dir="${build.classes.dir}/alchemy/create/" includes="**/*.class">
                <contains text="TypeShapes" casesensitive="no"/>
            </fileset>
        </copy>
        <!-- Inverse Shapes -->
        <copy todir="${basedir}/plugins/inverseShapes/alchemy/create">
            <fileset dir="${build.classes.dir}/alchemy/create/" includes="**/*.class">
                <contains text="InverseShapes" casesensitive="no"/>
            </fileset>
        </copy>
        <!-- Microphone Shapes -->
        <copy todir="${basedir}/plugins/micShapes/alchemy/create">
            <fileset dir="${build.classes.dir}/alchemy/create/" includes="**/*.class">
                <contains text="MicShapes" casesensitive="no"/>
            </fileset>
        </copy>
        <!-- Median Shapes -->
        <copy todir="${basedir}/plugins/medianShapes/alchemy/create">
            <fileset dir="${build.classes.dir}/alchemy/create/" includes="**/*.class">
                <contains text="MedianShapes" casesensitive="no"/>
            </fileset>
        </copy>
        
        <!-- AFFECTS -->
        <!-- Mirror -->
        <copy todir="${basedir}/plugins/mirror/alchemy/affect">
            <fileset dir="${build.classes.dir}/alchemy/affect/" includes="**/*.class">
                <contains text="Mirror" casesensitive="no"/>
            </fileset>
        </copy>
        <!-- Blindness -->
        <copy todir="${basedir}/plugins/blindness/alchemy/affect">
            <fileset dir="${build.classes.dir}/alchemy/affect/" includes="**/*.class">
                <contains text="Blindness" casesensitive="no"/>
            </fileset>
        </copy>
        <!-- Random -->
        <copy todir="${basedir}/plugins/random/alchemy/affect">
            <fileset dir="${build.classes.dir}/alchemy/affect/" includes="**/*.class">
                <contains text="Random" casesensitive="no"/>
            </fileset>
        </copy>
        <!-- Mic Expand -->
        <copy todir="${basedir}/plugins/micExpand/alchemy/affect">
            <fileset dir="${build.classes.dir}/alchemy/affect/" includes="**/*.class">
                <contains text="MicExpand" casesensitive="no"/>
            </fileset>
        </copy>
        
        <!-- Repeat -->
        <copy todir="${basedir}/plugins/repeat/alchemy/affect">
            <fileset dir="${build.classes.dir}/alchemy/affect/" includes="**/*.class">
                <contains text="Repeat" casesensitive="no"/>
            </fileset>
        </copy>
        
        <!--
        <move file="${build.classes.dir}/alchemy/create/ImageShapes.class" todir="${basedir}/plugins/imageShapes/alchemy/create"/>
        -->

        <!-- Copy the Data folder to the Dist directory -->
        <!--
        <copy todir="${dist.dir}/data">
            <fileset dir="${basedir}/data"/>
        </copy>
         -->
         
        <!-- Copy the lib folder to the Dist directory
        <copy todir="${dist.dir}/lib">
            <fileset dir="${basedir}/lib"/>
        </copy>
         -->
        
        <!-- Define custom JPF specific Ant tasks -->
        <path id="classpath">
            <fileset dir="lib" includes="*.jar" />
        </path>
        
        <typedef resource="org/java/plugin/tools/ant/jpf-tasks.properties">
            <classpath refid="classpath" />
        </typedef>	
        
        <!-- Call "jpf-zip" task to process plug-ins packaging every plug-in as single ZIP file -->
        <jpf-zip
            basedir="${basedir}/plugins"
            includes="*/*.xml"
            destdir="${basedir}/plugins"/>
        
        <mkdir dir="${dist.dir}/plugins" />
        
        <copy todir="${dist.dir}/plugins">
            <fileset dir="${basedir}/plugins" includes="**/*.zip"/>
        </copy>     
        
        
        
        <!-- Unzip and remove the plugin class files from the Alchemy Jar -->
        <unzip src="${dist.jar}" dest="${dist.dir}/Alchemy" />
        <delete includeemptydirs="true">
            <fileset dir="${dist.dir}/Alchemy/alchemy/affect" includes="**/*"/>
            <fileset dir="${dist.dir}/Alchemy/alchemy/create" includes="**/*"/>
        </delete>
        <!-- Delete the original jar -->
        <delete dir="${dist.jar}"/>
        <!-- 
        Unless we zip up the contents to a directory other than 'dist', 
        the .class files get automatically included.
        To get around this we make the zip in the main directory than move it.
        Hacky I know...
        -->
        <zip destfile="Alchemy.jar" basedir="${dist.dir}/Alchemy"/>
        <move file="Alchemy.jar" todir="${dist.dir}"/>
        
        <!-- Delete the extracted zip folder and other Netbeans crap while we are at it -->
        <delete dir="${dist.dir}/Alchemy"/>
        <delete dir="${dist.dir}/lib"/>
        <delete file="${dist.dir}/README.TXT"/>
        
        
    </target>	
    
    
    
</project>
